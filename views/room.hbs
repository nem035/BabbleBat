<div id="room-page">
  <div class="animated bounceInLeft col-sm-3">
    <div class="card card-lg animate bounceInDown">
      <div class="card-heading">
        Users
      </div>
      <div class="card-body">
        <ul id="users-list" class="list-group">
          <i class="fa fa-3x fa-fw fa-spin fa-spinner text-info"></i>
        </ul>
      </div>
    </div>
  </div>
  <div class="animated bounceInRight col-sm-9">
    <div class="card card-lg animated bounceInUp">
      <div class="card-heading">
        <div id="room-name">
          {{room.name}} 
        </div>
      </div>
      <div class="card-body">
        <div id="chat-window">
          <ul id="chat-messages">
            <i class="fa fa-4x fa-fw fa-spin fa-spinner text-info"></i>
          </ul>
        </div>
        <div id="chat-input-group" class="input-group input-group-md">
          <div class="input-group-btn">
            <button id="chat-send-btn" class="btn btn-md btn-success" type="button">Send</button>
          </div>
          <div class="input-group-btn dropup">
            <button type="button" class="btn btn-md btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-fw fa-smile-o"></i></button>
            <ul id="emoji-dropdown-menu" class="dropdown-menu">
              <li class="">
                <span class="chat-icon">😁</span>
                <span class="chat-icon">😂</span>
                <span class="chat-icon">😃</span>
                <span class="chat-icon">😄</span>
                <span class="chat-icon">😅</span>
                <span class="chat-icon">😆</span>
                <span class="chat-icon">😉</span>
                <span class="chat-icon">😋</span>
                <span class="chat-icon">😘</span>
                <span class="chat-icon">😜</span>
                <span class="chat-icon">😝</span>
                <span class="chat-icon">😡</span>
              </li>
            </ul>
          </div>
          <input id="chat-input" type="text" class="input-md form-control" placeholder="Enter message...">
        </div>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript">
  $(() => {
    'use strict';

    const socket     = io('{{socketUrl}}');
    
    const roomId     = '{{room._id}}';
    const roomName   = '{{room.name}}';
    const roomOwner  = '{{room.owner}}';
    
    const userId     = '{{user._id}}';
    const userName   = '{{user.name}}';
    const userAvatar = '{{user.avatar}}';
        
    // set the page title programatically
    const title = document.title;
    const pipeIndex = title.indexOf('|');
    const subIndex = pipeIndex != -1 ? pipeIndex : title.length;
    document.title  = title.substring(0, subIndex).trim() + ` | ${roomName}`;
      
    // map of existing users this room
    const userMap = {};
    
    //list of active connections in this room
    let connectionList;  
      
    // DOM
    const $usersList     = $('#users-list');
    const $chatMessages  = $('#chat-messages');
    const $chatInput     = $('#chat-input');
    const $chatSendBtn   = $('#chat-send-btn');
    const $emojiDropdown = $('#emoji-dropdown-menu')
    
    const getUserStatus = user => 
      connectionList.indexOf(user.connection) !== -1 ? 
      'Online' : 'Offline';
    
    const isOwner = user => user._id === roomOwner;
    const isMe = user => user._id === userId;
    
    function getUserTemplate(user) {
      const status = getUserStatus(user);
      const statusClass = status.toLowerCase();
      
      return `<li data-user="${user._id}" class="animated bounceIn user-list-item ${statusClass}">
                <div class="col-sm-3">
                  <img class="user-avatar" src="${user.avatar}">
                  <span class="user-status">
                    ${status}
                  </span>
                </div>
                <div class="col-sm-9">
                  <span class="user-name">
                    ${user.name}
                  </span>
                  ${isOwner(user) ? '<span class="text-owner text-warning">Owner</span>' : ''}
                </div>
             </li>`;
    }
    
    function addUserToList(user) {
      
      const template = getUserTemplate(user);
      
      // user sees self as the first user in the list
      if (isMe(user)) {
        $usersList.prepend(template);
      } else {
        $usersList.append(template);
      }
    }
    
    function addUser(user) {
      addUserToList(user);
      userMap[user._id] = true;
    }
    
    function updateUserStatus(user, status) {
      let rem;
          
      if (status === 'Online') {
        rem = 'offline';
      } else {
        rem = 'online';
      }
      
      const $user = $(`[data-user=${user._id}]`);
      const $status = $user.find('.user-status');
      
      $user.removeClass(rem).addClass(status.toLowerCase());
      $status.text(status);
    }
      
    socket.on('connect', () => {
      console.debug('Connection to server established');
      socket.emit('reqJoinRoom', roomId);
    });
    
    // update connections list
    function setConnections(connections) {
      connectionList = connections;
    }
    
    function getNoMessagesTemplate() {
      return `<div class="no-messages-box">
                <i class="fa fa-fw fa-info-circle"></i> 
                Chat is empty
              </div>`;
    }
    
    function getMessageTemplate(message) {
      const owner = message.owner;
      
      const isSelf = isMe(owner);
      return `<li class="chat-message animated bounceIn ${isSelf ? 'by-me' : 'by-them'}">
                <div class="user-avatar-wrapper ${isSelf ? 'pull-right' : 'pull-left'}">
                  <img class="user-avatar" src="${owner.avatar}"/>
                  <div class="user-name">
                    ${isSelf ? 'Me' : owner.name}
                  </div>
                </div>
                <div class="message">
                  <div class="content">
                    ${message.content}
                  </div>
                  <div class="clearfix"></div>
                </div>
              </li>`;
    }
    
    function renderMessage(m) {
      $chatMessages.append(getMessageTemplate(m));
    }
    
    function renderMessages(messages) {
      messages.forEach(m => {
        renderMessage(m);
      });
    }
    
    socket.on('resJoinRoom', (res) => {

      setConnections(res.connections);
            
      // add messages
      $chatMessages.empty();
      const messages = res.messages;
      if (messages.length === 0) {
        $chatMessages.append(getNoMessagesTemplate());
      } else {
        renderMessages(messages);
      }
      
      // add users
      $usersList.empty();
      res.users.forEach(user => {
        addUser(user);
      });
    });
    
    socket.on('userJoinedRoom', (res) => {
      setConnections(res.connections);
      
      const user = res.user;
      
      // if user is a new member, add him/her to the list
      // otherwise update his/her status
      if (!userMap[user._id]) {
        addUser(user);
      } else {
        updateUserStatus(user, 'Online');
      }
      
    });
    
    socket.on('userLeftRoom', (res) => {
      updateUserStatus(res.user, 'Offline');
    });
    
    function sendMessage() {
      const content = $chatInput.val();
      if (content !== '') {
        socket.emit('sendMessage', {
          roomId,
          userId,
          content
        });
        
        // clear the input field
        $chatInput.val('');
      }
    }
    
    $chatSendBtn.on('click', sendMessage);
    
    $chatInput.on('keyup', (e) => {
      e.preventDefault();
      
      if (e.which === 13) {
        sendMessage();
      } 
    });
    
    socket.on('receiveMessage', res => {
      renderMessage(res.message);
    });
    
    $emojiDropdown.on('click', '.chat-icon', function() {
      const icon = $(this).text();
      const text = $chatInput.val();
      
      $chatInput.val(text + icon);
    });
  });
</script> 